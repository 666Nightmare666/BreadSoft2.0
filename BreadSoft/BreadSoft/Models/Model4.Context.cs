//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BreadSoft.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class BreadSoftv2Entities1 : DbContext
    {
        public BreadSoftv2Entities1()
            : base("name=BreadSoftv2Entities1")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<cliente> cliente { get; set; }
        public virtual DbSet<compra> compra { get; set; }
        public virtual DbSet<detalleCompra> detalleCompra { get; set; }
        public virtual DbSet<detalleVenta> detalleVenta { get; set; }
        public virtual DbSet<empleado> empleado { get; set; }
        public virtual DbSet<materiaPrima> materiaPrima { get; set; }
        public virtual DbSet<persona> persona { get; set; }
        public virtual DbSet<producto> producto { get; set; }
        public virtual DbSet<productoMateriaPrima> productoMateriaPrima { get; set; }
        public virtual DbSet<proveedor> proveedor { get; set; }
        public virtual DbSet<venta> venta { get; set; }
    
        public virtual ObjectResult<buscarArticuloVenta_Result> buscarArticuloVenta(string buscar)
        {
            var buscarParameter = buscar != null ?
                new ObjectParameter("buscar", buscar) :
                new ObjectParameter("buscar", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<buscarArticuloVenta_Result>("buscarArticuloVenta", buscarParameter);
        }
    
        public virtual ObjectResult<consultarCliente_Result> consultarCliente()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarCliente_Result>("consultarCliente");
        }
    
        public virtual ObjectResult<consultarEmpleado_Result> consultarEmpleado()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarEmpleado_Result>("consultarEmpleado");
        }
    
        public virtual ObjectResult<consultarProducto_Result> consultarProducto()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarProducto_Result>("consultarProducto");
        }
    
        public virtual ObjectResult<consultarProveedor_Result> consultarProveedor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<consultarProveedor_Result>("consultarProveedor");
        }
    
        public virtual ObjectResult<detailsEmpleado_Result> detailsEmpleado(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<detailsEmpleado_Result>("detailsEmpleado", idParameter);
        }
    
        public virtual int disminuirInventario(Nullable<int> idProducto, Nullable<decimal> cantidad)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("disminuirInventario", idProductoParameter, cantidadParameter);
        }
    
        public virtual int editarCliente(string nombre, string apellidoPaterno, string apellidoMaterno, string domicilio, string telefono, string correoElectronico, string usuario, Nullable<int> idPersona, Nullable<int> idCliente)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("apellidoPaterno", apellidoPaterno) :
                new ObjectParameter("apellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("apellidoMaterno", apellidoMaterno) :
                new ObjectParameter("apellidoMaterno", typeof(string));
    
            var domicilioParameter = domicilio != null ?
                new ObjectParameter("domicilio", domicilio) :
                new ObjectParameter("domicilio", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("correoElectronico", correoElectronico) :
                new ObjectParameter("correoElectronico", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("idPersona", idPersona) :
                new ObjectParameter("idPersona", typeof(int));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("idCliente", idCliente) :
                new ObjectParameter("idCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editarCliente", nombreParameter, apellidoPaternoParameter, apellidoMaternoParameter, domicilioParameter, telefonoParameter, correoElectronicoParameter, usuarioParameter, idPersonaParameter, idClienteParameter);
        }
    
        public virtual int editarEmpleado(string nombre, string apellidoPaterno, string apellidoMaterno, string domicilio, string telefono, string correoElectronico, string usuario, string contrasena, string rol, Nullable<int> idPersona)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("apellidoPaterno", apellidoPaterno) :
                new ObjectParameter("apellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("apellidoMaterno", apellidoMaterno) :
                new ObjectParameter("apellidoMaterno", typeof(string));
    
            var domicilioParameter = domicilio != null ?
                new ObjectParameter("domicilio", domicilio) :
                new ObjectParameter("domicilio", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("correoElectronico", correoElectronico) :
                new ObjectParameter("correoElectronico", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("contrasena", contrasena) :
                new ObjectParameter("contrasena", typeof(string));
    
            var rolParameter = rol != null ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(string));
    
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("idPersona", idPersona) :
                new ObjectParameter("idPersona", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editarEmpleado", nombreParameter, apellidoPaternoParameter, apellidoMaternoParameter, domicilioParameter, telefonoParameter, correoElectronicoParameter, usuarioParameter, contrasenaParameter, rolParameter, idPersonaParameter);
        }
    
        public virtual int editarProveedor(string nombre, string apellidoPaterno, string apellidoMaterno, string domicilio, string telefono, string correoElectronico, string empresa, Nullable<int> idPersona, Nullable<int> idProveedor)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("apellidoPaterno", apellidoPaterno) :
                new ObjectParameter("apellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("apellidoMaterno", apellidoMaterno) :
                new ObjectParameter("apellidoMaterno", typeof(string));
    
            var domicilioParameter = domicilio != null ?
                new ObjectParameter("domicilio", domicilio) :
                new ObjectParameter("domicilio", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("correoElectronico", correoElectronico) :
                new ObjectParameter("correoElectronico", typeof(string));
    
            var empresaParameter = empresa != null ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(string));
    
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("idPersona", idPersona) :
                new ObjectParameter("idPersona", typeof(int));
    
            var idProveedorParameter = idProveedor.HasValue ?
                new ObjectParameter("idProveedor", idProveedor) :
                new ObjectParameter("idProveedor", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editarProveedor", nombreParameter, apellidoPaternoParameter, apellidoMaternoParameter, domicilioParameter, telefonoParameter, correoElectronicoParameter, empresaParameter, idPersonaParameter, idProveedorParameter);
        }
    
        public virtual int eliminarCliente(Nullable<int> idPersona)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("idPersona", idPersona) :
                new ObjectParameter("idPersona", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarCliente", idPersonaParameter);
        }
    
        public virtual int eliminarEmpleado(Nullable<int> idPersona)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("idPersona", idPersona) :
                new ObjectParameter("idPersona", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarEmpleado", idPersonaParameter);
        }
    
        public virtual int eliminarMateria(Nullable<int> idMateriaP)
        {
            var idMateriaPParameter = idMateriaP.HasValue ?
                new ObjectParameter("idMateriaP", idMateriaP) :
                new ObjectParameter("idMateriaP", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarMateria", idMateriaPParameter);
        }
    
        public virtual int eliminarProducto(Nullable<int> idProducto)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarProducto", idProductoParameter);
        }
    
        public virtual int eliminarProveedor(Nullable<int> idPersona)
        {
            var idPersonaParameter = idPersona.HasValue ?
                new ObjectParameter("idPersona", idPersona) :
                new ObjectParameter("idPersona", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarProveedor", idPersonaParameter);
        }
    
        public virtual int eliminarVenta(Nullable<int> idVenta)
        {
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarVenta", idVentaParameter);
        }
    
        public virtual ObjectResult<inicarSesion_Result> inicarSesion(string usuario, string contrasena)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("contrasena", contrasena) :
                new ObjectParameter("contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<inicarSesion_Result>("inicarSesion", usuarioParameter, contrasenaParameter);
        }
    
        public virtual int insertarCliente(string nombre, string apellidoPaterno, string apellidoMaterno, string domicilio, string telefono, string correoElectronico, string usuario)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("apellidoPaterno", apellidoPaterno) :
                new ObjectParameter("apellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("apellidoMaterno", apellidoMaterno) :
                new ObjectParameter("apellidoMaterno", typeof(string));
    
            var domicilioParameter = domicilio != null ?
                new ObjectParameter("domicilio", domicilio) :
                new ObjectParameter("domicilio", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("correoElectronico", correoElectronico) :
                new ObjectParameter("correoElectronico", typeof(string));
    
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarCliente", nombreParameter, apellidoPaternoParameter, apellidoMaternoParameter, domicilioParameter, telefonoParameter, correoElectronicoParameter, usuarioParameter);
        }
    
        public virtual int insertarDetalle(Nullable<int> idProducto, Nullable<int> idVenta, Nullable<decimal> cantidad)
        {
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            var idVentaParameter = idVenta.HasValue ?
                new ObjectParameter("idVenta", idVenta) :
                new ObjectParameter("idVenta", typeof(int));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarDetalle", idProductoParameter, idVentaParameter, cantidadParameter);
        }
    
        public virtual int insertarEmpleado(string nombre, string apellidoPaterno, string apellidoMaterno, string domicilio, string telefono, string correoElectronico, string contrasena, string rol)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("apellidoPaterno", apellidoPaterno) :
                new ObjectParameter("apellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("apellidoMaterno", apellidoMaterno) :
                new ObjectParameter("apellidoMaterno", typeof(string));
    
            var domicilioParameter = domicilio != null ?
                new ObjectParameter("domicilio", domicilio) :
                new ObjectParameter("domicilio", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("correoElectronico", correoElectronico) :
                new ObjectParameter("correoElectronico", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("contrasena", contrasena) :
                new ObjectParameter("contrasena", typeof(string));
    
            var rolParameter = rol != null ?
                new ObjectParameter("rol", rol) :
                new ObjectParameter("rol", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarEmpleado", nombreParameter, apellidoPaternoParameter, apellidoMaternoParameter, domicilioParameter, telefonoParameter, correoElectronicoParameter, contrasenaParameter, rolParameter);
        }
    
        public virtual int insertarProducto(string nombre, string descripcion, Nullable<int> cantidad, Nullable<decimal> precio, byte[] foto)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("foto", foto) :
                new ObjectParameter("foto", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarProducto", nombreParameter, descripcionParameter, cantidadParameter, precioParameter, fotoParameter);
        }
    
        public virtual int insertarProveedor(string nombre, string apellidoPaterno, string apellidoMaterno, string domicilio, string telefono, string correoElectronico, string empresa, Nullable<int> idProducto)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var apellidoPaternoParameter = apellidoPaterno != null ?
                new ObjectParameter("apellidoPaterno", apellidoPaterno) :
                new ObjectParameter("apellidoPaterno", typeof(string));
    
            var apellidoMaternoParameter = apellidoMaterno != null ?
                new ObjectParameter("apellidoMaterno", apellidoMaterno) :
                new ObjectParameter("apellidoMaterno", typeof(string));
    
            var domicilioParameter = domicilio != null ?
                new ObjectParameter("domicilio", domicilio) :
                new ObjectParameter("domicilio", typeof(string));
    
            var telefonoParameter = telefono != null ?
                new ObjectParameter("telefono", telefono) :
                new ObjectParameter("telefono", typeof(string));
    
            var correoElectronicoParameter = correoElectronico != null ?
                new ObjectParameter("correoElectronico", correoElectronico) :
                new ObjectParameter("correoElectronico", typeof(string));
    
            var empresaParameter = empresa != null ?
                new ObjectParameter("empresa", empresa) :
                new ObjectParameter("empresa", typeof(string));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertarProveedor", nombreParameter, apellidoPaternoParameter, apellidoMaternoParameter, domicilioParameter, telefonoParameter, correoElectronicoParameter, empresaParameter, idProductoParameter);
        }
    
        public virtual int inventarioMateria(Nullable<int> cantidad, Nullable<int> idMateria)
        {
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var idMateriaParameter = idMateria.HasValue ?
                new ObjectParameter("idMateria", idMateria) :
                new ObjectParameter("idMateria", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("inventarioMateria", cantidadParameter, idMateriaParameter);
        }
    
        public virtual int inventarioProducto(Nullable<int> cantidad, Nullable<int> idProducto)
        {
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("inventarioProducto", cantidadParameter, idProductoParameter);
        }
    
        public virtual int modificarMateria(string nombre, string descripcion, Nullable<int> cantidad, Nullable<decimal> precio, Nullable<int> idMateriaP)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var idMateriaPParameter = idMateriaP.HasValue ?
                new ObjectParameter("idMateriaP", idMateriaP) :
                new ObjectParameter("idMateriaP", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("modificarMateria", nombreParameter, descripcionParameter, cantidadParameter, precioParameter, idMateriaPParameter);
        }
    
        public virtual int modificarProducto(string nombre, string descripcion, Nullable<int> cantidad, Nullable<decimal> precio, byte[] foto, Nullable<int> idProducto)
        {
            var nombreParameter = nombre != null ?
                new ObjectParameter("nombre", nombre) :
                new ObjectParameter("nombre", typeof(string));
    
            var descripcionParameter = descripcion != null ?
                new ObjectParameter("descripcion", descripcion) :
                new ObjectParameter("descripcion", typeof(string));
    
            var cantidadParameter = cantidad.HasValue ?
                new ObjectParameter("cantidad", cantidad) :
                new ObjectParameter("cantidad", typeof(int));
    
            var precioParameter = precio.HasValue ?
                new ObjectParameter("precio", precio) :
                new ObjectParameter("precio", typeof(decimal));
    
            var fotoParameter = foto != null ?
                new ObjectParameter("foto", foto) :
                new ObjectParameter("foto", typeof(byte[]));
    
            var idProductoParameter = idProducto.HasValue ?
                new ObjectParameter("idProducto", idProducto) :
                new ObjectParameter("idProducto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("modificarProducto", nombreParameter, descripcionParameter, cantidadParameter, precioParameter, fotoParameter, idProductoParameter);
        }
    
        public virtual ObjectResult<mostrarUsuario_Result> mostrarUsuario(string usuario, string contrasena)
        {
            var usuarioParameter = usuario != null ?
                new ObjectParameter("usuario", usuario) :
                new ObjectParameter("usuario", typeof(string));
    
            var contrasenaParameter = contrasena != null ?
                new ObjectParameter("contrasena", contrasena) :
                new ObjectParameter("contrasena", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<mostrarUsuario_Result>("mostrarUsuario", usuarioParameter, contrasenaParameter);
        }
    }
}
